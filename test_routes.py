"""
Holds all tests to test all routes in this application

*** NOTE: ***

When running the test need to change the relative imports in:

- `app.py`

    - `utils.helpers` --> `.utils.helpers`
    - `utils.db_model` --> `.utils.db_model`
    - `utils.queries` --> `.utils.queries`

Otherwise the test file will throw an error. However, when running the app
    locally having the `.` at the beginning does not work and throws an error.
    I was unable to fix this bug in the time I had for this challenge.

** Note About Incomplete Test File: **

I will admit that I need to do more learning on testing. I have wrote some
tests on work I have done in the past but they were not as complicated as I
would need to write for this application. I have even taken a beginner course
on TDD. However, I will admit that I am not very efficient in TDD yet but I am
up for the challenge of learning more about it and improving my skills. I
understand the basic concept behind TDD and it makes sense but, being I just
found out about this opening and challenge yesterday, I wanted to make sure I
was able to build out the functionality in the time I had left and still be
able to submit a working application so I could demonstrate my abilities that
I do currently have.
"""
import os
import tempfile
import json

import pytest

from flask import Flask, request
from sqlalchemy import text

from .app import config_routes
from .utils.db_model import db, User, Image
from .utils.queries import get_user_id, dup_user


@pytest.fixture
def client():
    """
    Creates the client needed for each test

    :return:
        client : provides a user interface so you can test a web-based application
    """
    # Initialize the Flask application
    app = Flask(__name__)
    # Call on the function to configure the routes
    config_routes(app)
    # Create the client for testing
    client = app.test_client()

    return client


mock_user1 = {'first': 'Test',
              'last': 'Case',
              'username': 'testuser',
              'password': 'pass1234',
              'confirmation': 'pass1234',
              'email_add': 'testing@gmail.com'
}


def valid(client):
    with client.session_transaction() as sess:
        sess['user_id'] = get_user_id(mock_user1['username'])[0][0]

    return sess


# mock_image1 = {
#     'img': '',
#     'name': 'Harvard Logo',
#     'img_type': 'png',
#     'public': 0,
#     'owner': 'Harvard University',
#     'user_id': valid(client)
# }


def invalid(client):
    with client.session_transaction() as sess:
        sess['user_id'] = None

    return sess


# # Can not figure out how to get this test to work properly
def test_reg(client):
    # # Could not get this code to delete the test user to work but I can
    # #   get the test to pass if I manually delete the record from the
    # #   database and then run this test. So there is something wrong in
    # #   my code to delete the user if it already exist.
    # if dup_user(mock_user1['username']):
    #     db.engine.execute(
    #         text(
    #             """
    #             DELETE FROM "user"
    #             WHERE "id" = :id;
    #             """
    #         ), id=user_exists[0][0]
    #     )
    #     db.session.commit()

    response = client.post('/register', data=mock_user1,
                           follow_redirects=True)
    assert response.get_data(
        b'Your registration is complete and you have been logged in successfully!'
    )
    assert response.request.path == '/'


def test_home_valid_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/')
    assert response.status_code == 200


def test_home_no_login(client):
    # Test home when no user is logged in
    invalid(client)
    response = client.get('/', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


def test_edit_act_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/edit_act')
    assert response.status_code == 200


def test_edit_act_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/edit_act', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


def test_upload_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/upload')
    assert response.status_code == 200


def test_upload_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/upload', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


# def test_upload(client):
#     valid(client)
#     response = client.post('/upload', data=mock_image1,
#                            follow_redirects=True)
#     assert response.get_data(
#         b'Your Image "Harvard Logo" has been added successfully!'
#     )
#     assert response.request.path == '/'


def test_select_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/select')
    assert response.status_code == 200


def test_select_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/select', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


def test_all_imgs_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/all_imgs')
    assert response.status_code == 200


def test_all_imgs_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/all_imgs', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


def test_display_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/display/1')
    assert response.status_code == 200


def test_display_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/display/1', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200


def test_remove_login(client):
    # Test that we get the proper status code when valid user is logged in
    valid(client)
    response = client.get('/remove')
    assert response.status_code == 200


# def test_remove_img(client):
#     valid(client)
#     response = client.post('/remove', data={'name': })


def test_remove_no_login(client):
    # Test that we get the proper status code when valid user is logged in
    invalid(client)
    response = client.get('/remove', follow_redirects=True)
    assert response.request.path == '/login'
    assert response.status_code == 200
